trigger:
  branches:
    include:
      - unity-bc-master
  paths:
    include:
      - "EconveyancePro/*"

variables:
  - group: "UNITYBC-DEV"

# 1. workingDirectory: Since this folder has multiple images, the workingDirectory is set by the 
# individual project's pipeline file so Azure DevOps knows which project to build
# 2. vmImage: The image to use for the pool
# 5. imageRegistry: the AWS container registry to use. e.g.{aws_account_id}.dkr.ecr.{region}.amazonaws.com
parameters:
  - name: workingDirectory
    type: string
    default: $(Build.SourcesDirectory)/EconveyancePro/build
  - name: vmImage
    type: string
    default: "ubuntu-latest"
  - name: imageRegistry
    type: string
    default: $(IMAGE_REGISTRY)

stages:
  - stage: Build
    jobs:
      - job: "BuildImage"
        pool: 
          vmImage: ${{ parameters.vmImage }}
        steps:
          # A specific task AWSShellScript@1 had to be used to get the aws ecr command to work correctly
          # We call this early on so that the pipeline is able to reference base images from ECR
          - task: AWSShellScript@1
            name: AwsEcrLogin
            inputs:
              awsCredentials: $(AWS_SERVICE_CONNECTION)
              scriptType: inline
              inlineScript: |
                aws ecr get-login-password | docker login --username AWS --password-stdin ${{ parameters.imageRegistry }}     
              regionName: $(AWS_REGION)

          - script: |
              echo "Running make build"
              make build
            workingDirectory: ${{ parameters.workingDirectory }} 
            displayName: "Build Image"
            env:
              BUILD_ID: $(Build.BuildNumber)
           
          - script: |
              echo "Test EconveyancePro container startup"
              make econ-test
            workingDirectory: ${{ parameters.workingDirectory }}
            displayName: "Test EconveyancePro Image Locally"

          - script: |
              echo "Test Worklings container startup and rabbitmq queues creation"
              make ws-test
            workingDirectory: ${{ parameters.workingDirectory }}
            displayName: "Test Worklings Image Locally"

          - bash: exit 1
            displayName: "Fail build if make test fails"
            condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')
  
          - script: |
              make build-push
            displayName: "Push [Dev] to Container Registry"
            workingDirectory: ${{ parameters.workingDirectory }}
            condition: and(succeeded(), ne(variables['Build.Reason'], 'IndividualCI'))
            env:
              BUILD_ID: $(Build.BuildNumber)

          - script: |
              make release-push
            displayName: "Push [Latest] to Container Registry"
            workingDirectory: ${{ parameters.workingDirectory }}
            condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))

          - script: |
              docker logout
            displayName: "Docker Logout"  
